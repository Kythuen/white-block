var r=Object.defineProperty;var o=(s,e,t)=>e in s?r(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var n=(s,e,t)=>o(s,typeof e!="symbol"?e+"":e,t);class d{constructor(e,t){n(this,"id");n(this,"element");n(this,"events",{});n(this,"handlers",{});this.element=e??document.body,this.id=t||""}on(e,t){if(!this.events[e]){this.events[e]=[];const i=h=>{if(this.events[e])for(const l of this.events[e])l(h)};this.handlers[e]=i,this.element.addEventListener(e,i)}this.events[e].push(t)}off(e,t){var i;(i=this.events[e])!=null&&i.length&&(this.events[e].splice(this.events[e].indexOf(t),1),this.events[e].length||(delete this.events[e],this.element.removeEventListener(e,this.handlers[e])))}clean(){for(const e in this.events)this.element.removeEventListener(e,this.handlers[e]);this.events={}}}class m{constructor(){n(this,"ElementEvents",{})}get(e){const t=document.querySelector(e);return t?(this.ElementEvents[e]||(this.ElementEvents[e]=new d(t,"body")),this.ElementEvents[e]):null}}const v=new m;export{d as E,v as G};
